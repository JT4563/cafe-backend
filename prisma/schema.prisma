
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String   @id @default(cuid())
  name       String   @unique
  domain     String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)

  branches   Branch[]
  users      User[]
  products   Product[]
  bookings   Booking[]
  orders     Order[]
  stockItems StockItem[]
  stockMovements StockMovement[]
  bulkImports BulkImportJob[]
  auditLogs  AuditLog[]
}

model Branch {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tables    Table[]
  bookings  Booking[]
  orders    Order[]
  users     User[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  branchId  String?
  email     String
  name      String?
  password  String
  role      Role     @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch    Branch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)

  @@unique([tenantId, email])
  @@index([tenantId])
  @@index([branchId])
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  WAITER
  KITCHEN
  ACCOUNTANT
  STAFF
}

model Table {
  id        String   @id @default(cuid())
  branchId  String
  name      String
  capacity  Int
  zone      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  orders    Order[]

  @@unique([branchId, name])
  @@index([branchId])
}

model Booking {
  id          String   @id @default(cuid())
  tenantId    String
  branchId    String
  tableId     String?
  customerName String?
  customerPhone String?
  partySize   Int
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  deposit     Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  table       Table?   @relation(fields: [tableId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([branchId])
  @@index([tableId])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  branchId    String?
  sku         String?
  name        String
  description String?
  category    String?
  price       Float
  costPrice   Float?
  isInventoryTracked Boolean @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  recipes     Recipe[]
  orderItems  OrderItem[]
  stockItems  StockItem[]

  @@unique([tenantId, sku])
  @@index([tenantId])
}

model Recipe {
  id        String   @id @default(cuid())
  productId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  ingredients RecipeIngredient[]

  @@index([productId])
}

model RecipeIngredient {
  id          String   @id @default(cuid())
  recipeId    String
  ingredientProductId String
  quantity    Float
  unit        String   @default("piece")
  createdAt   DateTime @default(now())

  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model StockItem {
  id        String   @id @default(cuid())
  tenantId  String
  branchId  String?
  productId String
  qty       Float
  minQty    Float    @default(10)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([tenantId, productId])
  @@index([tenantId])
  @@index([productId])
}

model StockMovement {
  id         String   @id @default(cuid())
  tenantId   String
  branchId   String?
  productId  String
  type       MovementType
  qty        Float
  reference  String?  // Invoice/PO reference
  notes      String?
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([productId])
  @@index([type])
}

enum MovementType {
  PURCHASE
  CONSUMPTION
  WASTAGE
  ADJUSTMENT
}

model Order {
  id         String   @id @default(cuid())
  tenantId   String
  branchId   String
  tableId    String?
  userId     String?
  total      Float
  tax        Float    @default(0)
  discount   Float    @default(0)
  status     OrderStatus @default(PENDING)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  completedAt DateTime?

  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  table      Table?   @relation(fields: [tableId], references: [id], onDelete: SetNull)
  items      OrderItem[]
  invoices   Invoice[]

  @@index([tenantId])
  @@index([branchId])
  @@index([tableId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  qty        Int
  price      Float
  specialRequest String?
  status     OrderItemStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

enum OrderItemStatus {
  PENDING
  SENT_TO_KITCHEN
  PREPARING
  READY
  SERVED
  CANCELLED
}

model KOT {
  id        String   @id @default(cuid())
  orderId   String
  branchId  String
  tenantId  String
  payload   Json
  printed   Boolean  @default(false)
  printedAt DateTime?
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([branchId])
  @@index([tenantId])
  @@index([printed])
}

model Invoice {
  id        String   @id @default(cuid())
  orderId   String
  tenantId  String
  invoiceNumber String @unique
  amount    Float
  tax       Float    @default(0)
  discount  Float    @default(0)
  status    InvoiceStatus @default(DRAFT)
  dueDate   DateTime?
  paidAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@unique([tenantId, invoiceNumber])
  @@index([tenantId])
  @@index([status])
  @@index([orderId])
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  tenantId  String
  method    PaymentMethod
  amount    Float
  status    PaymentStatus
  reference String?  // Transaction reference
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([tenantId])
  @@index([status])
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  WALLET
  CHEQUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model BulkImportJob {
  id        String   @id @default(cuid())
  tenantId  String
  filename  String
  status    ImportStatus @default(PENDING)
  errors    Int      @default(0)
  successCount Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String?
  userId    String?
  action    String
  resource  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  createdAt DateTime @default(now())

  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}
