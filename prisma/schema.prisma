
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String   @id @default(cuid())
  name       String
  domain     String?  @unique
  createdAt  DateTime @default(now())
  branches   Branch[]
  users      User[]
}

model Branch {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  address   String?
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tables    Table[]
  orders    Order[]
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  branchId  String?
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  branch    Branch?  @relation(fields: [branchId], references: [id])
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  WAITER
  KITCHEN
  ACCOUNTANT
  STAFF
}

model Table {
  id        String   @id @default(cuid())
  branchId  String
  name      String
  capacity  Int
  zone      String?
  createdAt DateTime @default(now())

  branch    Branch   @relation(fields: [branchId], references: [id])
  bookings  Booking[]
  orders    Order[]
}

model Booking {
  id          String   @id @default(cuid())
  tenantId    String
  branchId    String
  tableId     String?
  customerName String?
  partySize   Int
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  deposit     Float? 
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  branch      Branch   @relation(fields: [branchId], references: [id])
  table       Table?   @relation(fields: [tableId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  branchId    String?
  sku         String? 
  name        String
  price       Float
  isInventoryTracked Boolean @default(true)
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model Recipe {
  id        String   @id @default(cuid())
  productId String
  // list of ingredients stored externally as RecipeIngredient model
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
  ingredients RecipeIngredient[]
}

model RecipeIngredient {
  id          String @id @default(cuid())
  recipeId    String
  ingredientProductId String
  quantity    Float
  recipe      Recipe @relation(fields: [recipeId], references: [id])
}

model StockItem {
  id        String   @id @default(cuid())
  tenantId  String
  branchId  String?
  productId String
  qty       Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id])
}

model StockMovement {
  id         String   @id @default(cuid())
  tenantId   String
  branchId   String?
  productId  String
  type       MovementType
  qty        Float
  createdAt  DateTime @default(now())
}

enum MovementType {
  PURCHASE
  CONSUMPTION
  WASTAGE
  ADJUSTMENT
}

model Order {
  id         String   @id @default(cuid())
  tenantId   String
  branchId   String
  tableId    String?
  userId     String?
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime @default(now())

  items      OrderItem[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  qty        Int
  price      Float
  status     OrderItemStatus @default(PENDING)
}

enum OrderItemStatus {
  PENDING
  SENT_TO_KITCHEN
  PREPARING
  READY
  SERVED
  CANCELLED
}

model KOT {
  id        String @id @default(cuid())
  orderId   String
  branchId  String
  payload   Json
  printed   Boolean @default(false)
  createdAt DateTime @default(now())
}

model Invoice {
  id        String @id @default(cuid())
  orderId   String
  tenantId  String
  amount    Float
  createdAt DateTime @default(now())
}

model Payment {
  id        String @id @default(cuid())
  invoiceId String
  method    String
  amount    Float
  status    String
  createdAt DateTime @default(now())
}

model BulkImportJob {
  id        String @id @default(cuid())
  tenantId  String
  filename  String
  status    ImportStatus @default(PENDING)
  errors    Int     @default(0)
  createdAt DateTime @default(now())
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model AuditLog {
  id        String @id @default(cuid())
  tenantId  String?
  userId    String?
  action    String
  payload   Json?
  createdAt DateTime @default(now())
}
